// <auto-generated />
using System;
using DotNetCore_Api.EfCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DotNetCore_Api.Migrations
{
    [DbContext(typeof(CartDbcontext))]
    [Migration("20210716194952_CreateSeçenek")]
    partial class CreateSeçenek
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DotNetCore_Api.EfCore.Models.AppliesTo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FilterId")
                        .HasColumnType("int");

                    b.Property<int>("KategoriId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FilterId");

                    b.HasIndex("KategoriId");

                    b.ToTable("AppliesTos");
                });

            modelBuilder.Entity("DotNetCore_Api.EfCore.Models.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.HasKey("CartId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("DotNetCore_Api.EfCore.Models.Favori", b =>
                {
                    b.Property<int>("FavoriId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("FavoriId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Favoris");
                });

            modelBuilder.Entity("DotNetCore_Api.EfCore.Models.Filter", b =>
                {
                    b.Property<int>("FilterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FilterId");

                    b.ToTable("Filters");
                });

            modelBuilder.Entity("DotNetCore_Api.EfCore.Models.HasÖzellik", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ÖzellikId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ÖzellikId");

                    b.ToTable("HasÖzelliks");
                });

            modelBuilder.Entity("DotNetCore_Api.EfCore.Models.HizmetVerir", b =>
                {
                    b.Property<int>("HizmetVerirId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("KategoriId")
                        .HasColumnType("int");

                    b.Property<int>("MarkaId")
                        .HasColumnType("int");

                    b.HasKey("HizmetVerirId");

                    b.HasIndex("KategoriId");

                    b.HasIndex("MarkaId");

                    b.ToTable("HizmetVerirs");
                });

            modelBuilder.Entity("DotNetCore_Api.EfCore.Models.Kategori", b =>
                {
                    b.Property<int>("KategoriId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Kategoriİsmi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ÜstKategoriId")
                        .HasColumnType("int");

                    b.HasKey("KategoriId");

                    b.HasIndex("ÜstKategoriId");

                    b.ToTable("Kategoris");
                });

            modelBuilder.Entity("DotNetCore_Api.EfCore.Models.Marka", b =>
                {
                    b.Property<int>("MarkaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Markaİsmi")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MarkaId");

                    b.ToTable("Markas");
                });

            modelBuilder.Entity("DotNetCore_Api.EfCore.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KategoriId")
                        .HasColumnType("int");

                    b.Property<int>("MarkaId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("OriginalPrice")
                        .HasColumnType("float");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("ProductId");

                    b.HasIndex("KategoriId");

                    b.HasIndex("MarkaId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("DotNetCore_Api.EfCore.Models.ProductIncart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductIncarts");
                });

            modelBuilder.Entity("DotNetCore_Api.EfCore.Models.Seçenek", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("FilterId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FilterId");

                    b.ToTable("Seçenekler");
                });

            modelBuilder.Entity("DotNetCore_Api.EfCore.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DotNetCore_Api.EfCore.Models.Özellik", b =>
                {
                    b.Property<int>("ÖzellikId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ÖzellikId");

                    b.ToTable("Özelliks");
                });

            modelBuilder.Entity("DotNetCore_Api.EfCore.Models.AppliesTo", b =>
                {
                    b.HasOne("DotNetCore_Api.EfCore.Models.Filter", "Filter")
                        .WithMany("AppliesTos")
                        .HasForeignKey("FilterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DotNetCore_Api.EfCore.Models.Kategori", "Kategori")
                        .WithMany("AppliesTos")
                        .HasForeignKey("KategoriId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Filter");

                    b.Navigation("Kategori");
                });

            modelBuilder.Entity("DotNetCore_Api.EfCore.Models.Cart", b =>
                {
                    b.HasOne("DotNetCore_Api.EfCore.Models.User", "User")
                        .WithOne("Cart")
                        .HasForeignKey("DotNetCore_Api.EfCore.Models.Cart", "CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DotNetCore_Api.EfCore.Models.Favori", b =>
                {
                    b.HasOne("DotNetCore_Api.EfCore.Models.Product", "Product")
                        .WithMany("Favoris")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DotNetCore_Api.EfCore.Models.User", "User")
                        .WithMany("Favoriler")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DotNetCore_Api.EfCore.Models.HasÖzellik", b =>
                {
                    b.HasOne("DotNetCore_Api.EfCore.Models.Product", "Product")
                        .WithMany("Özelliks")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DotNetCore_Api.EfCore.Models.Özellik", "Özellik")
                        .WithMany("HasÖzelliks")
                        .HasForeignKey("ÖzellikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Özellik");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DotNetCore_Api.EfCore.Models.HizmetVerir", b =>
                {
                    b.HasOne("DotNetCore_Api.EfCore.Models.Kategori", "Kategori")
                        .WithMany()
                        .HasForeignKey("KategoriId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DotNetCore_Api.EfCore.Models.Marka", "Marka")
                        .WithMany("HizmetVerirs")
                        .HasForeignKey("MarkaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kategori");

                    b.Navigation("Marka");
                });

            modelBuilder.Entity("DotNetCore_Api.EfCore.Models.Kategori", b =>
                {
                    b.HasOne("DotNetCore_Api.EfCore.Models.Kategori", "ÜstKategori")
                        .WithMany("AltKategoriler")
                        .HasForeignKey("ÜstKategoriId");

                    b.Navigation("ÜstKategori");
                });

            modelBuilder.Entity("DotNetCore_Api.EfCore.Models.Product", b =>
                {
                    b.HasOne("DotNetCore_Api.EfCore.Models.Kategori", "Kategori")
                        .WithMany("ProductsOnCategory")
                        .HasForeignKey("KategoriId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DotNetCore_Api.EfCore.Models.Marka", "Marka")
                        .WithMany("Ürünler")
                        .HasForeignKey("MarkaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kategori");

                    b.Navigation("Marka");
                });

            modelBuilder.Entity("DotNetCore_Api.EfCore.Models.ProductIncart", b =>
                {
                    b.HasOne("DotNetCore_Api.EfCore.Models.Cart", "Cart")
                        .WithMany("ProductIncarts")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DotNetCore_Api.EfCore.Models.Product", "Product")
                        .WithMany("CartsThatHavaProduct")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DotNetCore_Api.EfCore.Models.Seçenek", b =>
                {
                    b.HasOne("DotNetCore_Api.EfCore.Models.Filter", "Filter")
                        .WithMany("Seçenekler")
                        .HasForeignKey("FilterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DotNetCore_Api.EfCore.Models.Özellik", "Özellik")
                        .WithOne("Seçenek")
                        .HasForeignKey("DotNetCore_Api.EfCore.Models.Seçenek", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Filter");

                    b.Navigation("Özellik");
                });

            modelBuilder.Entity("DotNetCore_Api.EfCore.Models.Cart", b =>
                {
                    b.Navigation("ProductIncarts");
                });

            modelBuilder.Entity("DotNetCore_Api.EfCore.Models.Filter", b =>
                {
                    b.Navigation("AppliesTos");

                    b.Navigation("Seçenekler");
                });

            modelBuilder.Entity("DotNetCore_Api.EfCore.Models.Kategori", b =>
                {
                    b.Navigation("AltKategoriler");

                    b.Navigation("AppliesTos");

                    b.Navigation("ProductsOnCategory");
                });

            modelBuilder.Entity("DotNetCore_Api.EfCore.Models.Marka", b =>
                {
                    b.Navigation("HizmetVerirs");

                    b.Navigation("Ürünler");
                });

            modelBuilder.Entity("DotNetCore_Api.EfCore.Models.Product", b =>
                {
                    b.Navigation("CartsThatHavaProduct");

                    b.Navigation("Favoris");

                    b.Navigation("Özelliks");
                });

            modelBuilder.Entity("DotNetCore_Api.EfCore.Models.User", b =>
                {
                    b.Navigation("Cart");

                    b.Navigation("Favoriler");
                });

            modelBuilder.Entity("DotNetCore_Api.EfCore.Models.Özellik", b =>
                {
                    b.Navigation("HasÖzelliks");

                    b.Navigation("Seçenek");
                });
#pragma warning restore 612, 618
        }
    }
}
